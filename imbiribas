/** Enviando leitura de um LDR para a nuvem com conversão para Volts e controle de servomotor **/
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <unistd.h>
#include <curl/curl.h>
#include <iomanip>
#include <cmath>

using namespace std;

void enviarDadosParaServidor(int valorLido, float valorEmVolts, float percentualAbertura);

#define LDR_PATH "/sys/bus/iio/devices/iio:device0/in_voltage"
#define VREF 3.3
#define RESOLUTION 4095.0
#define MIN_DUTY_CYCLE 5.0
#define MAX_DUTY_CYCLE 10.0

int readAnalog(int number) {
  stringstream ss;
  ss << LDR_PATH << number << "_raw";
  fstream fs;
  fs.open(ss.str().c_str(), fstream::in);
  fs >> number;
  fs.close();
  return number;
}

void escreverPWM(float dutyCycle) {
  cout << "Simulando escrita PWM com Duty Cycle: " << fixed << setprecision(2) << dutyCycle << "%" << endl;
}

int main(int argc, char* argv[]) {
  cout << "Iniciando a Leitura no LDR e controle de cortina" << endl;

  while (true) {
    int valorBruto = readAnalog(0);
    float valorEmVolts = (VREF * valorBruto) / RESOLUTION;

    float valorNormalizado = 1.0 - (static_cast<float>(valorBruto) / RESOLUTION);
    float dutyCycle = MIN_DUTY_CYCLE + valorNormalizado * (MAX_DUTY_CYCLE - MIN_DUTY_CYCLE);

    if (dutyCycle < MIN_DUTY_CYCLE) {
      dutyCycle = MIN_DUTY_CYCLE;
    } else if (dutyCycle > MAX_DUTY_CYCLE) {
      dutyCycle = MAX_DUTY_CYCLE;
    }

    float percentualAbertura = ((dutyCycle - MIN_DUTY_CYCLE) / (MAX_DUTY_CYCLE - MIN_DUTY_CYCLE)) * 100.0;

    cout << "O valor lido foi: " << valorBruto << " (entre 0 e 4095)." << endl;
    cout << "O valor em Volts é: " << fixed << setprecision(3) << valorEmVolts << " V." << endl;
    cout << "Percentual de abertura da cortina: " << fixed << setprecision(2) << percentualAbertura << "%" << endl;

    escreverPWM(dutyCycle);
    enviarDadosParaServidor(valorBruto, valorEmVolts, round(percentualAbertura));
    usleep(2000000);
  }
  return 0;
}

void enviarDadosParaServidor(int valorLido, float valorEmVolts, float percentualAbertura) {
  CURL *curl;
  CURLcode res;

  curl = curl_easy_init();
  if (curl) {
    std::string url = "https://api.thingspeak.com/update?api_key=532VV9NZORLNZEGO&field1=" + std::to_string(valorLido) + "&field2=" + std::to_string(valorEmVolts) + "&field3=" + std::to_string(static_cast<int>(percentualAbertura));

    std::string valorLidoStr = std::to_string(valorLido);
    std::string valorEmVoltsStr = std::to_string(valorEmVolts);
    std::string percentualAberturaStr = std::to_string(static_cast<int>(percentualAbertura));

    std::string postParams = "ldr_raw=" + valorLidoStr + "&ldr_voltage=" + valorEmVoltsStr + "&curtain_opening=" + percentualAberturaStr;

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postParams.c_str());

    res = curl_easy_perform(curl);

    if (res != CURLE_OK) {
      std::cerr << "Erro ao enviar dados para o servidor: " << curl_easy_strerror(res) << std::endl;
    }

    curl_easy_cleanup(curl);
  }
}
